# Azure Pipeline for {{cookiecutter.project_name}}
# - Triggers on commits to main branch
# - Uses Git tags for versioning
# - Increments minor version automatically
# - Updates dependencies in uv.lock
# - Creates a new Git tag for the release
# - Publishes the package using uv

trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: publish-tokens

steps:
  - checkout: self
    persistCredentials: "true"
    fetchDepth: "0"

  - script: |
      curl -LsSf https://astral.sh/uv/install.sh | sh
      echo '##vso[task.prependpath]$(HOME)/.cargo/bin'
      uv sync && uv run pre-commit install
    displayName: "Install dependencies"

  - script: uv run pre-commit run -a
    displayName: "Run code quality checks"

  - script: |
      # Setup Git credentials
      git config --global user.email "azuredevops@gn.com"
      git config --global user.name "Azure DevOps Pipeline"

      # Get current version from the latest tag
      LATEST_TAG=$(git tag --sort=-v:refname | head -1 2>/dev/null || echo "v0.0.0")
      CURRENT_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix more reliably

      # Ensure we have a valid version with defaults
      if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        CURRENT_VERSION="0.0.0"
      fi

      # Parse the version components
      MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
      MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
      PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)

      # Bump minor version (or adjust as needed)
      NEW_MINOR=$((MINOR + 1))
      NEW_VERSION="$MAJOR.$NEW_MINOR.0"
      NEW_TAG="v$NEW_VERSION"

      # Check if this exact commit is already tagged with a version
      COMMIT_TAG=$(git tag --points-at HEAD)
      if [ -n "$COMMIT_TAG" ]; then
        echo "This commit is already tagged with $COMMIT_TAG - skipping release"
        echo "##vso[task.setvariable variable=SKIP_RELEASE]true"
        exit 0
      fi

      # Create and push the tag
      git tag -a "$NEW_TAG" -m "Release $NEW_VERSION"
      git push origin "$NEW_TAG"

      # Checkout the exact tag to build from a clean state
      git checkout "$NEW_TAG"

      # Build the package
      uv build

      echo "##vso[task.setvariable variable=NEW_VERSION]$NEW_VERSION"
      echo "##vso[task.setvariable variable=NEW_TAG]$NEW_TAG"
    displayName: "Create version tag"
    condition: succeeded()

  - script: |
      echo "Publishing version $(NEW_VERSION)"
      uv publish --token $(UV_PUBLISH_TOKEN)
    displayName: "Publish package"
    condition: and(succeeded(), ne(variables['SKIP_RELEASE'], 'true'))
